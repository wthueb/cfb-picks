/* eslint-disable @typescript-eslint/consistent-indexed-object-style */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/wepa/team/season": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve opponent-adjusted team season statistics */
    get: operations["GetAdjustedTeamSeasonStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/wepa/players/passing": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve opponent-adjusted player passing statistics */
    get: operations["GetAdjustedPlayerPassingStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/wepa/players/rushing": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve opponent-adjusted player rushing statistics */
    get: operations["GetAdjustedPlayerRushingStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/wepa/players/kicking": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve Points Added Above Replacement (PAAR) ratings for kickers */
    get: operations["GetKickerPaar"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves team information */
    get: operations["GetTeams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/fbs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves information on teams playing in the highest division of CFB */
    get: operations["GetFBSTeams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/matchup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical matchup details for two given teams */
    get: operations["GetMatchup"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/roster": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical roster data */
    get: operations["GetRoster"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conferences": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves list of conferences */
    get: operations["GetConferences"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/talent": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve 247 Team Talent Composite for a given year */
    get: operations["GetTalent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/venues": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve list of venues */
    get: operations["GetVenues"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stats/player/season": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves aggregated player statistics for a given season */
    get: operations["GetPlayerSeasonStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stats/season": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves aggregated team season statistics */
    get: operations["GetTeamStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stats/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Gets team statistical categories */
    get: operations["GetCategories"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stats/season/advanced": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves advanced season statistics for teams */
    get: operations["GetAdvancedSeasonStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stats/game/advanced": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves advanced statistics aggregated by game */
    get: operations["GetAdvancedGameStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recruiting/players": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves player recruiting rankings */
    get: operations["GetRecruits"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recruiting/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves team recruiting rankings */
    get: operations["GetTeamRecruitingRankings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/recruiting/groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves aggregated recruiting statistics by team and position grouping */
    get: operations["GetAggregatedTeamRecruitingRatings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ratings/sp": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves SP+ ratings for a given year or school */
    get: operations["GetSP"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ratings/sp/conferences": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves aggregated historical conference SP+ data */
    get: operations["GetConferenceSP"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ratings/srs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical SRS for a year or team */
    get: operations["GetSRS"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ratings/elo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical Elo ratings */
    get: operations["GetElo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ratings/fpi": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical Football Power Index (FPI) ratings */
    get: operations["GetFPI"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rankings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical poll data */
    get: operations["GetRankings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plays": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical play data */
    get: operations["GetPlays"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plays/types": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves available play types */
    get: operations["GetPlayTypes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plays/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve player-play associations (limit 2000) */
    get: operations["GetPlayStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/plays/stats/types": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves available play stat types */
    get: operations["GetPlayStatTypes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Search for players (lists top 100 results) */
    get: operations["SearchPlayers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/usage": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves player usage data for a given season */
    get: operations["GetPlayerUsage"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/returning": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves returning production data. Either a year or team filter must be specified. */
    get: operations["GetReturningProduction"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/player/portal": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves transfer portal data for a given year */
    get: operations["GetTransferPortal"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ppa/predicted": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Query Predicted Points values by down and distance */
    get: operations["GetPredictedPoints"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ppa/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical team PPA metrics by season */
    get: operations["GetPredictedPointsAddedByTeam"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ppa/games": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical team PPA metrics by game */
    get: operations["GetPredictedPointsAddedByGame"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ppa/players/games": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Queries player PPA statistics by game */
    get: operations["GetPredictedPointsAddedByPlayerGame"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ppa/players/season": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Queries player PPA statistics by season */
    get: operations["GetPredictedPointsAddedByPlayerSeason"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/metrics/wp": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Query play win probabilities by game */
    get: operations["GetWinProbability"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/metrics/wp/pregame": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Queries pregame win probabilities */
    get: operations["GetPregameWinProbabilities"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/metrics/fg/ep": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Queries field goal expected points values */
    get: operations["GetFieldGoalExpectedPoints"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/live/plays": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Queries live play-by-play data and advanced stats */
    get: operations["GetLivePlays"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lines": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical betting data */
    get: operations["GetLines"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves information about the user, including their Patreon level and remaining API calls. */
    get: operations["GetUserInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical game data */
    get: operations["GetGames"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves team box score statistics */
    get: operations["GetGameTeamStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/players": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves player box score statistics */
    get: operations["GetGamePlayerStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/media": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves media information for games */
    get: operations["GetMedia"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/weather": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve historical and future weather data (Patreon only) */
    get: operations["GetWeather"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/records": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical team records */
    get: operations["GetRecords"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/calendar": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves calendar information */
    get: operations["GetCalendar"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/scoreboard": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves live scoreboard data */
    get: operations["GetScoreboard"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/drives": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical drive data */
    get: operations["GetDrives"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/draft/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves list of NFL teams */
    get: operations["GetDraftTeams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/draft/positions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves list of player position categories for the NFL Draft */
    get: operations["GetDraftPositions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/draft/picks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieve historical NFL draft data */
    get: operations["GetDraftPicks"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/coaches": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves historical head coach information and records */
    get: operations["GetCoaches"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/game/box/advanced": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieves an advanced box score for a game */
    get: operations["GetAdvancedBoxScore"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AdjustedTeamMetrics: {
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      teamId: number;
      team: string;
      conference: string;
      epa: {
        /** Format: double */
        rushing: number;
        /** Format: double */
        passing: number;
        /** Format: double */
        total: number;
      };
      epaAllowed: {
        /** Format: double */
        rushing: number;
        /** Format: double */
        passing: number;
        /** Format: double */
        total: number;
      };
      successRate: {
        /** Format: double */
        passingDowns: number;
        /** Format: double */
        standardDowns: number;
        /** Format: double */
        total: number;
      };
      successRateAllowed: {
        /** Format: double */
        passingDowns: number;
        /** Format: double */
        standardDowns: number;
        /** Format: double */
        total: number;
      };
      rushing: {
        /** Format: double */
        highlightYards: number;
        /** Format: double */
        openFieldYards: number;
        /** Format: double */
        secondLevelYards: number;
        /** Format: double */
        lineYards: number;
      };
      rushingAllowed: {
        /** Format: double */
        highlightYards: number;
        /** Format: double */
        openFieldYards: number;
        /** Format: double */
        secondLevelYards: number;
        /** Format: double */
        lineYards: number;
      };
      /** Format: double */
      explosiveness: number;
      /** Format: double */
      explosivenessAllowed: number;
    };
    PlayerWeightedEPA: {
      /** Format: int32 */
      year: number;
      athleteId: string;
      athleteName: string;
      position: string;
      team: string;
      conference: string;
      /** Format: double */
      wepa: number;
      /** Format: int32 */
      plays: number;
    };
    KickerPAAR: {
      /** Format: int32 */
      year: number;
      athleteId: string;
      athleteName: string;
      team: string;
      conference: string;
      /** Format: double */
      paar: number;
      /** Format: int32 */
      attempts: number;
    };
    Venue: {
      /** Format: int32 */
      id: number | null;
      name: string | null;
      city: string | null;
      state: string | null;
      zip: string | null;
      countryCode: string | null;
      timezone: string | null;
      /** Format: double */
      latitude: number | null;
      /** Format: double */
      longitude: number | null;
      elevation: string | null;
      /** Format: int32 */
      capacity: number | null;
      /** Format: int32 */
      constructionYear: number | null;
      grass?: boolean | null;
      dome?: boolean | null;
    };
    Team: {
      /** Format: int32 */
      id: number;
      school: string;
      mascot: string | null;
      abbreviation: string | null;
      alternateNames: string[] | null;
      conference: string | null;
      division: string | null;
      classification: string | null;
      color: string | null;
      alternateColor: string | null;
      logos: string[] | null;
      twitter: string | null;
      location: components["schemas"]["Venue"] | null;
    };
    MatchupGame: {
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: string;
      date: string;
      neutralSite: boolean;
      venue: string | null;
      homeTeam: string;
      /** Format: int32 */
      homeScore: number | null;
      awayTeam: string;
      /** Format: int32 */
      awayScore: number | null;
      winner: string | null;
    };
    Matchup: {
      team1: string;
      team2: string;
      /** Format: int32 */
      startYear?: number;
      /** Format: int32 */
      endYear?: number;
      /** Format: int32 */
      team1Wins: number;
      /** Format: int32 */
      team2Wins: number;
      /** Format: int32 */
      ties: number;
      games: components["schemas"]["MatchupGame"][];
    };
    RosterPlayer: {
      id: string;
      firstName: string;
      lastName: string;
      team: string;
      /** Format: int32 */
      height: number | null;
      /** Format: int32 */
      weight: number | null;
      /** Format: int32 */
      jersey: number | null;
      /**
       * Format: int32
       * @deprecated
       */
      year: number;
      position: string | null;
      homeCity: string | null;
      homeState: string | null;
      homeCountry: string | null;
      /** Format: double */
      homeLatitude: number | null;
      /** Format: double */
      homeLongitude: number | null;
      homeCountyFIPS: string | null;
      recruitIds: string[] | null;
    };
    /** @enum {string} */
    DivisionClassification: "fbs" | "fcs" | "ii" | "iii";
    Conference: {
      /** Format: int32 */
      id: number;
      name: string;
      shortName: string | null;
      abbreviation: string | null;
      classification: components["schemas"]["DivisionClassification"] | null;
    };
    TeamTalent: {
      /** Format: int32 */
      year: number;
      team: string;
      /** Format: double */
      talent: number;
    };
    PlayerStat: {
      /** Format: int32 */
      season: number;
      playerId: string;
      player: string;
      position: string;
      team: string;
      conference: string;
      category: string;
      statType: string;
      stat: string;
    };
    /** @enum {string} */
    SeasonType:
      | "regular"
      | "postseason"
      | "both"
      | "allstar"
      | "spring_regular"
      | "spring_postseason";
    TeamStat: {
      /** Format: int32 */
      season: number;
      team: string;
      conference: string;
      statName: string;
      statValue: string | number;
    };
    AdvancedSeasonStat: {
      /** Format: int32 */
      season: number;
      team: string;
      conference: string;
      offense: {
        passingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        rushingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        passingDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        standardDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        havoc: {
          /** Format: double */
          db: number | null;
          /** Format: double */
          frontSeven: number | null;
          /** Format: double */
          total: number | null;
        };
        fieldPosition: {
          /** Format: double */
          averagePredictedPoints: number | null;
          /** Format: double */
          averageStart: number | null;
        };
        /** Format: double */
        pointsPerOpportunity: number;
        /** Format: int32 */
        totalOpportunies: number;
        /** Format: int32 */
        openFieldYardsTotal: number;
        /** Format: double */
        openFieldYards: number;
        /** Format: int32 */
        secondLevelYardsTotal: number;
        /** Format: double */
        secondLevelYards: number;
        /** Format: int32 */
        lineYardsTotal: number;
        /** Format: double */
        lineYards: number;
        /** Format: double */
        stuffRate: number;
        /** Format: double */
        powerSuccess: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        successRate: number;
        /** Format: double */
        totalPPA: number;
        /** Format: double */
        ppa: number;
        /** Format: int32 */
        drives: number;
        /** Format: int32 */
        plays: number;
      };
      defense: {
        passingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        rushingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        passingDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        standardDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
          /** Format: double */
          rate: number;
        };
        havoc: {
          /** Format: double */
          db: number | null;
          /** Format: double */
          frontSeven: number | null;
          /** Format: double */
          total: number | null;
        };
        fieldPosition: {
          /** Format: double */
          averagePredictedPoints: number | null;
          /** Format: double */
          averageStart: number | null;
        };
        /** Format: double */
        pointsPerOpportunity: number;
        /** Format: int32 */
        totalOpportunies: number;
        /** Format: int32 */
        openFieldYardsTotal: number;
        /** Format: double */
        openFieldYards: number;
        /** Format: int32 */
        secondLevelYardsTotal: number;
        /** Format: double */
        secondLevelYards: number;
        /** Format: int32 */
        lineYardsTotal: number;
        /** Format: double */
        lineYards: number;
        /** Format: double */
        stuffRate: number;
        /** Format: double */
        powerSuccess: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        successRate: number;
        /** Format: double */
        totalPPA: number;
        /** Format: double */
        ppa: number;
        /** Format: int32 */
        drives: number;
        /** Format: int32 */
        plays: number;
      };
    };
    AdvancedGameStat: {
      /** Format: int32 */
      gameId: number;
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      team: string;
      opponent: string;
      offense: {
        passingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
        };
        rushingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
        };
        passingDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
        };
        standardDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
        };
        /** Format: int32 */
        openFieldYardsTotal: number;
        /** Format: double */
        openFieldYards: number | null;
        /** Format: int32 */
        secondLevelYardsTotal: number;
        /** Format: double */
        secondLevelYards: number;
        /** Format: int32 */
        lineYardsTotal: number;
        /** Format: double */
        lineYards: number;
        /** Format: double */
        stuffRate: number;
        /** Format: double */
        powerSuccess: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        successRate: number;
        /** Format: double */
        totalPPA: number;
        /** Format: double */
        ppa: number;
        /** Format: int32 */
        drives: number;
        /** Format: int32 */
        plays: number;
      };
      defense: {
        passingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
        };
        rushingPlays: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          totalPPA: number;
          /** Format: double */
          ppa: number;
        };
        passingDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
        };
        standardDowns: {
          /** Format: double */
          explosiveness: number | null;
          /** Format: double */
          successRate: number;
          /** Format: double */
          ppa: number;
        };
        /** Format: int32 */
        openFieldYardsTotal: number | null;
        /** Format: double */
        openFieldYards: number;
        /** Format: int32 */
        secondLevelYardsTotal: number;
        /** Format: double */
        secondLevelYards: number;
        /** Format: int32 */
        lineYardsTotal: number;
        /** Format: double */
        lineYards: number;
        /** Format: double */
        stuffRate: number;
        /** Format: double */
        powerSuccess: number | null;
        /** Format: double */
        explosiveness: number;
        /** Format: double */
        successRate: number;
        /** Format: double */
        totalPPA: number;
        /** Format: double */
        ppa: number;
        /** Format: int32 */
        drives: number;
        /** Format: int32 */
        plays: number;
      };
    };
    /** @enum {string} */
    RecruitClassification: "JUCO" | "PrepSchool" | "HighSchool";
    Recruit: {
      id: string;
      athleteId: string | null;
      recruitType: components["schemas"]["RecruitClassification"];
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      ranking: number | null;
      name: string;
      school: string | null;
      committedTo: string | null;
      position: string | null;
      /** Format: int32 */
      height: number | null;
      /** Format: int32 */
      weight: number | null;
      /** Format: int32 */
      stars: number;
      /** Format: double */
      rating: number;
      city: string | null;
      stateProvince: string | null;
      country: string | null;
      hometownInfo: {
        fipsCode: string | null;
        /** Format: double */
        longitude: number | null;
        /** Format: double */
        latitude: number | null;
      };
    };
    TeamRecruitingRanking: {
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      rank: number;
      team: string;
      /** Format: double */
      points: number;
    };
    AggregatedTeamRecruiting: {
      team: string;
      conference: string;
      positionGroup: string | null;
      /** Format: double */
      averageRating: number;
      /** Format: double */
      totalRating: number;
      /** Format: int32 */
      commits: number;
      /** Format: double */
      averageStars: number;
    };
    TeamSP: {
      /** Format: int32 */
      year: number;
      team: string;
      conference: string | null;
      /** Format: double */
      rating: number;
      /** Format: int32 */
      ranking: number | null;
      /** Format: double */
      secondOrderWins: number | null;
      /** Format: double */
      sos: number | null;
      offense: {
        /** Format: double */
        pace: number | null;
        /** Format: double */
        runRate: number | null;
        /** Format: double */
        passingDowns: number | null;
        /** Format: double */
        standardDowns: number | null;
        /** Format: double */
        passing: number | null;
        /** Format: double */
        rushing: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        success: number | null;
        /** Format: double */
        rating: number;
        /** Format: int32 */
        ranking: number | null;
      };
      defense: {
        havoc: {
          /** Format: double */
          db: number | null;
          /** Format: double */
          frontSeven: number | null;
          /** Format: double */
          total: number | null;
        };
        /** Format: double */
        passingDowns: number | null;
        /** Format: double */
        standardDowns: number | null;
        /** Format: double */
        passing: number | null;
        /** Format: double */
        rushing: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        success: number | null;
        /** Format: double */
        rating: number;
        /** Format: int32 */
        ranking: number | null;
      };
      specialTeams: {
        /** Format: double */
        rating: number | null;
      };
    };
    ConferenceSP: {
      /** Format: int32 */
      year: number;
      conference: string;
      /** Format: double */
      rating: number;
      /** Format: double */
      secondOrderWins: number | null;
      /** Format: double */
      sos: number | null;
      offense: {
        /** Format: double */
        pace: number | null;
        /** Format: double */
        runRate: number | null;
        /** Format: double */
        passingDowns: number | null;
        /** Format: double */
        standardDowns: number | null;
        /** Format: double */
        passing: number | null;
        /** Format: double */
        rushing: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        success: number | null;
        /** Format: double */
        rating: number;
      };
      defense: {
        havoc: {
          /** Format: double */
          db: number | null;
          /** Format: double */
          frontSeven: number | null;
          /** Format: double */
          total: number | null;
        };
        /** Format: double */
        passingDowns: number | null;
        /** Format: double */
        standardDowns: number | null;
        /** Format: double */
        passing: number | null;
        /** Format: double */
        rushing: number | null;
        /** Format: double */
        explosiveness: number | null;
        /** Format: double */
        success: number | null;
        /** Format: double */
        rating: number;
      };
      specialTeams: {
        /** Format: double */
        rating: number | null;
      };
    };
    TeamSRS: {
      /** Format: int32 */
      year: number;
      team: string;
      conference: string | null;
      division: string | null;
      /** Format: double */
      rating: number;
      /** Format: int32 */
      ranking: number | null;
    };
    TeamElo: {
      /** Format: int32 */
      year: number;
      team: string;
      conference: string;
      /** Format: int32 */
      elo: number | null;
    };
    TeamFPI: {
      /** Format: int32 */
      year: number;
      team: string;
      conference: string | null;
      /** Format: double */
      fpi: number | null;
      resumeRanks: {
        /** Format: int32 */
        gameControl: number | null;
        /** Format: int32 */
        remainingStrengthOfSchedule: number | null;
        /** Format: int32 */
        strengthOfSchedule: number | null;
        /** Format: int32 */
        averageWinProbability: number | null;
        /** Format: int32 */
        fpi: number | null;
        /** Format: int32 */
        strengthOfRecord: number | null;
      };
      efficiencies: {
        /** Format: double */
        specialTeams: number | null;
        /** Format: double */
        defense: number | null;
        /** Format: double */
        offense: number | null;
        /** Format: double */
        overall: number | null;
      };
    };
    PollRank: {
      /** Format: int32 */
      rank: number | null;
      school: string;
      conference: string | null;
      /** Format: int32 */
      firstPlaceVotes: number | null;
      /** Format: int32 */
      points: number | null;
    };
    Poll: {
      poll: string;
      ranks: components["schemas"]["PollRank"][];
    };
    PollWeek: {
      /** Format: int32 */
      season: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: int32 */
      week: number;
      polls: components["schemas"]["Poll"][];
    };
    Play: {
      id: string;
      driveId: string;
      /** Format: int32 */
      gameId: number;
      /** Format: int32 */
      driveNumber: number | null;
      /** Format: int32 */
      playNumber: number | null;
      offense: string;
      offenseConference: string | null;
      /** Format: int32 */
      offenseScore: number;
      defense: string;
      home: string;
      away: string;
      defenseConference: string | null;
      /** Format: int32 */
      defenseScore: number;
      /** Format: int32 */
      period: number;
      clock: {
        /** Format: int32 */
        seconds: number | null;
        /** Format: int32 */
        minutes: number | null;
      };
      /** Format: int32 */
      offenseTimeouts: number | null;
      /** Format: int32 */
      defenseTimeouts: number | null;
      /** Format: int32 */
      yardline: number;
      /** Format: int32 */
      yardsToGoal: number;
      /** Format: int32 */
      down: number;
      /** Format: int32 */
      distance: number;
      /** Format: int32 */
      yardsGained: number;
      scoring: boolean;
      playType: string;
      playText: string | null;
      /** Format: double */
      ppa: number | null;
      wallclock: string | null;
    };
    PlayType: {
      /** Format: int32 */
      id: number;
      text: string;
      abbreviation: string | null;
    };
    PlayStat: {
      /** Format: double */
      gameId: number;
      /** Format: double */
      season: number;
      /** Format: double */
      week: number;
      team: string;
      conference: string;
      opponent: string;
      /** Format: double */
      teamScore: number;
      /** Format: double */
      opponentScore: number;
      driveId: string;
      playId: string;
      /** Format: double */
      period: number;
      clock: {
        /** Format: double */
        seconds: number | null;
        /** Format: double */
        minutes: number | null;
      };
      /** Format: double */
      yardsToGoal: number;
      /** Format: double */
      down: number;
      /** Format: double */
      distance: number;
      athleteId: string;
      athleteName: string;
      statType: string;
      /** Format: double */
      stat: number;
    };
    PlayStatType: {
      /** Format: int32 */
      id: number;
      name: string;
    };
    PlayerSearchResult: {
      id: string;
      team: string;
      name: string;
      firstName: string | null;
      lastName: string | null;
      /** Format: int32 */
      weight: number | null;
      /** Format: int32 */
      height: number | null;
      /** Format: int32 */
      jersey: number | null;
      position: string;
      hometown: string;
      teamColor: string;
      teamColorSecondary: string;
    };
    PlayerPPAChartItem: {
      /** Format: int32 */
      playNumber: number;
      /** Format: double */
      avgPPA: number;
    };
    PlayerUsage: {
      /** Format: int32 */
      season: number;
      id: string;
      name: string;
      position: string;
      team: string;
      conference: string;
      usage: {
        /** Format: double */
        passingDowns: number | null;
        /** Format: double */
        standardDowns: number | null;
        /** Format: double */
        thirdDown: number | null;
        /** Format: double */
        secondDown: number | null;
        /** Format: double */
        firstDown: number | null;
        /** Format: double */
        rush: number | null;
        /** Format: double */
        pass: number | null;
        /** Format: double */
        overall: number | null;
      };
    };
    ReturningProduction: {
      /** Format: int32 */
      season: number;
      team: string;
      conference: string;
      /** Format: double */
      totalPPA: number;
      /** Format: double */
      totalPassingPPA: number;
      /** Format: double */
      totalReceivingPPA: number;
      /** Format: double */
      totalRushingPPA: number;
      /** Format: double */
      percentPPA: number;
      /** Format: double */
      percentPassingPPA: number;
      /** Format: double */
      percentReceivingPPA: number;
      /** Format: double */
      percentRushingPPA: number;
      /** Format: double */
      usage: number;
      /** Format: double */
      passingUsage: number;
      /** Format: double */
      receivingUsage: number;
      /** Format: double */
      rushingUsage: number;
    };
    /** @enum {string} */
    TransferEligibility: "Withdrawn" | "TBD" | "PendingAppeal" | "SittingOne" | "Immediate";
    PlayerTransfer: {
      /** Format: int32 */
      season: number;
      firstName: string;
      lastName: string;
      position: string;
      origin: string;
      destination: string | null;
      /** Format: date-time */
      transferDate: string | null;
      /** Format: double */
      rating: number | null;
      /** Format: int32 */
      stars: number | null;
      eligibility: components["schemas"]["TransferEligibility"] | null;
    };
    PredictedPointsValue: {
      /** Format: int32 */
      yardLine: number;
      /** Format: double */
      predictedPoints: number;
    };
    TeamSeasonPredictedPointsAdded: {
      /** Format: int32 */
      season: number;
      conference: string;
      team: string;
      offense: {
        cumulative: {
          /** Format: double */
          rushing: number;
          /** Format: double */
          passing: number;
          /** Format: double */
          total: number;
        };
        /** Format: double */
        thirdDown: number;
        /** Format: double */
        secondDown: number;
        /** Format: double */
        firstDown: number;
        /** Format: double */
        rushing: number;
        /** Format: double */
        passing: number;
        /** Format: double */
        overall: number;
      };
      defense: {
        cumulative: {
          /** Format: double */
          rushing: number;
          /** Format: double */
          passing: number;
          /** Format: double */
          total: number;
        };
        /** Format: double */
        thirdDown: number;
        /** Format: double */
        secondDown: number;
        /** Format: double */
        firstDown: number;
        /** Format: double */
        rushing: number;
        /** Format: double */
        passing: number;
        /** Format: double */
        overall: number;
      };
    };
    TeamGamePredictedPointsAdded: {
      /** Format: int32 */
      gameId: number;
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: components["schemas"]["SeasonType"];
      team: string;
      conference: string;
      opponent: string;
      offense: {
        /** Format: double */
        thirdDown: number;
        /** Format: double */
        secondDown: number;
        /** Format: double */
        firstDown: number;
        /** Format: double */
        rushing: number;
        /** Format: double */
        passing: number;
        /** Format: double */
        overall: number;
      };
      defense: {
        /** Format: double */
        thirdDown: number;
        /** Format: double */
        secondDown: number;
        /** Format: double */
        firstDown: number;
        /** Format: double */
        rushing: number;
        /** Format: double */
        passing: number;
        /** Format: double */
        overall: number;
      };
    };
    PlayerGamePredictedPointsAdded: {
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: components["schemas"]["SeasonType"];
      id: string;
      name: string;
      position: string;
      team: string;
      opponent: string;
      averagePPA: {
        /** Format: double */
        rush?: number;
        /** Format: double */
        pass?: number;
        /** Format: double */
        all: number;
      };
    };
    PlayerSeasonPredictedPointsAdded: {
      /** Format: int32 */
      season: number;
      id: string;
      name: string;
      position: string;
      team: string;
      conference: string;
      averagePPA: {
        /** Format: double */
        passingDowns?: number;
        /** Format: double */
        standardDowns?: number;
        /** Format: double */
        thirdDown?: number;
        /** Format: double */
        secondDown?: number;
        /** Format: double */
        firstDown?: number;
        /** Format: double */
        rush?: number;
        /** Format: double */
        pass?: number;
        /** Format: double */
        all: number;
      };
      totalPPA: {
        /** Format: double */
        passingDowns?: number;
        /** Format: double */
        standardDowns?: number;
        /** Format: double */
        thirdDown?: number;
        /** Format: double */
        secondDown?: number;
        /** Format: double */
        firstDown?: number;
        /** Format: double */
        rush?: number;
        /** Format: double */
        pass?: number;
        /** Format: double */
        all: number;
      };
    };
    PlayWinProbability: {
      /** Format: int32 */
      gameId: number;
      playId: string;
      playText: string;
      /** Format: int32 */
      homeId: number;
      home: string;
      /** Format: int32 */
      awayId: number;
      away: string;
      /** Format: double */
      spread: number;
      homeBall: boolean;
      /** Format: int32 */
      homeScore: number;
      /** Format: int32 */
      awayScore: number;
      /** Format: int32 */
      yardLine: number;
      /** Format: int32 */
      down: number;
      /** Format: int32 */
      distance: number;
      /** Format: double */
      homeWinProbability: number;
      /** Format: int32 */
      playNumber: number;
    };
    PregameWinProbability: {
      /** Format: int32 */
      season: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: int32 */
      week: number;
      /** Format: int32 */
      gameId: number;
      homeTeam: string;
      awayTeam: string;
      /** Format: double */
      spread: number;
      /** Format: double */
      homeWinProbability: number;
    };
    FieldGoalEP: {
      /** Format: int32 */
      yardsToGoal: number;
      /** Format: int32 */
      distance: number;
      /** Format: double */
      expectedPoints: number;
    };
    LiveGameTeam: {
      /** Format: int32 */
      teamId: number;
      team: string;
      /** @enum {string} */
      homeAway: "home" | "away";
      lineScores: number[];
      /** Format: int32 */
      points: number;
      /** Format: int32 */
      drives: number;
      /** Format: int32 */
      scoringOpportunities: number;
      /** Format: double */
      pointsPerOpportunity: number;
      /** Format: int32 */
      plays: number;
      /** Format: double */
      lineYards: number;
      /** Format: double */
      lineYardsPerRush: number;
      /** Format: double */
      secondLevelYards: number;
      /** Format: double */
      secondLevelYardsPerRush: number;
      /** Format: double */
      openFieldYards: number;
      /** Format: double */
      openFieldYardsPerRush: number;
      /** Format: double */
      epaPerPlay: number;
      /** Format: double */
      totalEpa: number;
      /** Format: double */
      passingEpa: number;
      /** Format: double */
      epaPerPass: number;
      /** Format: double */
      rushingEpa: number;
      /** Format: double */
      epaPerRush: number;
      /** Format: double */
      successRate: number;
      /** Format: double */
      standardDownSuccessRate: number;
      /** Format: double */
      passingDownSuccessRate: number;
      /** Format: double */
      explosiveness: number;
    };
    LiveGamePlay: {
      id: string;
      /** Format: int32 */
      homeScore: number;
      /** Format: int32 */
      awayScore: number;
      /** Format: int32 */
      period: number;
      clock: string;
      /** Format: date-time */
      wallClock: string;
      /** Format: int32 */
      teamId: number;
      team: string;
      /** Format: int32 */
      down: number;
      /** Format: int32 */
      distance: number;
      /** Format: int32 */
      yardsToGoal: number;
      /** Format: int32 */
      yardsGained: number;
      /** Format: int32 */
      playTypeId: number;
      playType: string;
      /** Format: double */
      epa: number | null;
      garbageTime: boolean;
      success: boolean;
      /** @enum {string} */
      rushPash: "rush" | "pass" | "other";
      /** @enum {string} */
      downType: "passing" | "standard";
      playText: string;
    };
    LiveGameDrive: {
      id: string;
      /** Format: int32 */
      offenseId: number;
      offense: string;
      /** Format: int32 */
      defenseId: number;
      defense: string;
      /** Format: int32 */
      playCount: number;
      /** Format: int32 */
      yards: number;
      /** Format: int32 */
      startPeriod: number;
      startClock: string | null;
      /** Format: int32 */
      startYardsToGoal: number;
      /** Format: int32 */
      endPeriod: number | null;
      endClock: string | null;
      /** Format: int32 */
      endYardsToGoal: number | null;
      duration: string | null;
      scoringOpportunity: boolean;
      result: string;
      /** Format: int32 */
      pointsGained: number;
      plays: components["schemas"]["LiveGamePlay"][];
    };
    LiveGame: {
      /** Format: int32 */
      id: number;
      status: string;
      /** Format: int32 */
      period: number | null;
      clock: string;
      possession: string;
      /** Format: int32 */
      down: number | null;
      /** Format: int32 */
      distance: number | null;
      /** Format: int32 */
      yardsToGoal: number | null;
      teams: components["schemas"]["LiveGameTeam"][];
      drives: components["schemas"]["LiveGameDrive"][];
    };
    GameLine: {
      provider: string;
      /** Format: double */
      spread: number | null;
      formattedSpread: string;
      /** Format: double */
      spreadOpen: number | null;
      /** Format: double */
      overUnder: number | null;
      /** Format: double */
      overUnderOpen: number | null;
      /** Format: double */
      homeMoneyline: number | null;
      /** Format: double */
      awayMoneyline: number | null;
    };
    BettingGame: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      season: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: int32 */
      week: number;
      /** Format: date-time */
      startDate: string;
      homeTeam: string;
      homeConference: string | null;
      homeClassification: components["schemas"]["DivisionClassification"] | null;
      /** Format: int32 */
      homeScore: number | null;
      awayTeam: string;
      awayConference: string | null;
      awayClassification: components["schemas"]["DivisionClassification"] | null;
      /** Format: int32 */
      awayScore: number | null;
      lines: components["schemas"]["GameLine"][];
    };
    UserInfo: {
      /** Format: double */
      patronLevel: number;
      /** Format: double */
      remainingCalls: number;
    };
    Game: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: date-time */
      startDate: string;
      startTimeTBD: boolean;
      completed: boolean;
      neutralSite: boolean;
      conferenceGame: boolean;
      /** Format: int32 */
      attendance: number | null;
      /** Format: int32 */
      venueId: number | null;
      venue: string | null;
      /** Format: int32 */
      homeId: number;
      homeTeam: string;
      homeConference: string | null;
      homeClassification: components["schemas"]["DivisionClassification"] | null;
      /** Format: int32 */
      homePoints: number | null;
      homeLineScores: number[] | null;
      /** Format: double */
      homePostgameWinProbability: number | null;
      /** Format: int32 */
      homePregameElo: number | null;
      /** Format: int32 */
      homePostgameElo: number | null;
      /** Format: int32 */
      awayId: number;
      awayTeam: string;
      awayConference: string | null;
      awayClassification: components["schemas"]["DivisionClassification"] | null;
      /** Format: int32 */
      awayPoints: number | null;
      awayLineScores: number[] | null;
      /** Format: double */
      awayPostgameWinProbability: number | null;
      /** Format: int32 */
      awayPregameElo: number | null;
      /** Format: int32 */
      awayPostgameElo: number | null;
      /** Format: double */
      excitementIndex: number | null;
      highlights: string | null;
      notes: string | null;
    };
    GameTeamStatsTeamStat: {
      category: string;
      stat: string;
    };
    GameTeamStatsTeam: {
      /** Format: int32 */
      teamId: number;
      team: string;
      conference: string | null;
      /** @enum {string} */
      homeAway: "home" | "away";
      /** Format: int32 */
      points: number | null;
      stats: components["schemas"]["GameTeamStatsTeamStat"][];
    };
    GameTeamStats: {
      /** Format: int32 */
      id: number;
      teams: components["schemas"]["GameTeamStatsTeam"][];
    };
    GamePlayerStatPlayer: {
      id: string;
      name: string;
      stat: string;
    };
    GamePlayerStatTypes: {
      name: string;
      athletes: components["schemas"]["GamePlayerStatPlayer"][];
    };
    GamePlayerStatCategories: {
      name: string;
      types: components["schemas"]["GamePlayerStatTypes"][];
    };
    GamePlayerStatsTeam: {
      team: string;
      conference: string | null;
      /** @enum {string} */
      homeAway: "home" | "away";
      /** Format: int32 */
      points: number | null;
      categories: components["schemas"]["GamePlayerStatCategories"][];
    };
    GamePlayerStats: {
      /** Format: int32 */
      id: number;
      teams: components["schemas"]["GamePlayerStatsTeam"][];
    };
    /** @enum {string} */
    MediaType: "tv" | "radio" | "web" | "ppv" | "mobile";
    GameMedia: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: date-time */
      startTime: string;
      isStartTimeTBD: boolean;
      homeTeam: string;
      homeConference: string | null;
      awayTeam: string;
      awayConference: string | null;
      mediaType: components["schemas"]["MediaType"];
      outlet: string;
    };
    GameWeather: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: date-time */
      startTime: string;
      gameIndoors: boolean;
      homeTeam: string;
      homeConference: string | null;
      awayTeam: string;
      awayConference: string | null;
      /** Format: int32 */
      venueId: number;
      venue: string;
      /** Format: double */
      temperature: number | null;
      /** Format: double */
      dewPoint: number | null;
      /** Format: double */
      humidity: number | null;
      /** Format: double */
      precipitation: number | null;
      /** Format: double */
      snowfall: number | null;
      /** Format: double */
      windDirection: number | null;
      /** Format: double */
      windSpeed: number | null;
      /** Format: double */
      pressure: number | null;
      /** Format: double */
      weatherConditionCode: number | null;
      weatherCondition: string | null;
    };
    TeamRecord: {
      /** Format: int32 */
      games: number;
      /** Format: int32 */
      wins: number;
      /** Format: int32 */
      losses: number;
      /** Format: int32 */
      ties: number;
    };
    TeamRecords: {
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      teamId: number;
      team: string;
      classification: components["schemas"]["DivisionClassification"] | null;
      conference: string;
      division: string;
      /** Format: double */
      expectedWins: number | null;
      total: components["schemas"]["TeamRecord"];
      conferenceGames: components["schemas"]["TeamRecord"];
      homeGames: components["schemas"]["TeamRecord"];
      awayGames: components["schemas"]["TeamRecord"];
      neutralSiteGames: components["schemas"]["TeamRecord"];
      regularSeason: components["schemas"]["TeamRecord"];
      postseason: components["schemas"]["TeamRecord"];
    };
    CalendarWeek: {
      /** Format: int32 */
      season: number;
      /** Format: int32 */
      week: number;
      seasonType: components["schemas"]["SeasonType"];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      /**
       * Format: date-time
       * @deprecated
       */
      firstGameStart: string;
      /**
       * Format: date-time
       * @deprecated
       */
      lastGameStart: string;
    };
    /** @enum {string} */
    GameStatus: "scheduled" | "in_progress" | "completed";
    ScoreboardGame: {
      /** Format: int32 */
      id: number;
      /** Format: date-time */
      startDate: string;
      startTimeTBD: boolean;
      tv: string | null;
      neutralSite: boolean;
      conferenceGame: boolean;
      status: components["schemas"]["GameStatus"];
      /** Format: int32 */
      period: number | null;
      clock: string | null;
      situation: string | null;
      possession: string | null;
      lastPlay: string | null;
      venue: {
        state: string | null;
        city: string | null;
        name: string | null;
      };
      homeTeam: {
        lineScores: number[] | null;
        /** Format: int32 */
        points: number | null;
        classification: components["schemas"]["DivisionClassification"] | null;
        conference: string | null;
        name: string;
        /** Format: int32 */
        id: number;
      };
      awayTeam: {
        lineScores: number[] | null;
        /** Format: int32 */
        points: number | null;
        classification: components["schemas"]["DivisionClassification"] | null;
        conference: string | null;
        name: string;
        /** Format: int32 */
        id: number;
      };
      weather: {
        /** Format: double */
        windDirection: number | null;
        /** Format: double */
        windSpeed: number | null;
        description: string | null;
        /** Format: double */
        temperature: number | null;
      };
      betting: {
        /** Format: double */
        awayMoneyline: number | null;
        /** Format: double */
        homeMoneyline: number | null;
        /** Format: double */
        overUnder: number | null;
        /** Format: double */
        spread: number | null;
      };
    };
    Drive: {
      offense: string;
      offenseConference: string | null;
      defense: string;
      defenseConference: string | null;
      /** Format: int32 */
      gameId: number;
      id: string;
      /** Format: int32 */
      driveNumber: number | null;
      scoring: boolean;
      /** Format: int32 */
      startPeriod: number;
      /** Format: int32 */
      startYardline: number;
      /** Format: int32 */
      startYardsToGoal: number;
      startTime: {
        /** Format: int32 */
        seconds: number | null;
        /** Format: int32 */
        minutes: number | null;
      };
      /** Format: int32 */
      endPeriod: number;
      /** Format: int32 */
      endYardline: number;
      /** Format: int32 */
      endYardsToGoal: number;
      endTime: {
        /** Format: int32 */
        seconds: number | null;
        /** Format: int32 */
        minutes: number | null;
      };
      /** Format: int32 */
      plays: number;
      /** Format: int32 */
      yards: number;
      driveResult: string;
      isHomeOffense: boolean;
      /** Format: int32 */
      startOffenseScore: number;
      /** Format: int32 */
      startDefenseScore: number;
      /** Format: int32 */
      endOffenseScore: number;
      /** Format: int32 */
      endDefenseScore: number;
    };
    DraftTeam: {
      location: string;
      nickname: string | null;
      displayName: string | null;
      logo: string | null;
    };
    DraftPosition: {
      name: string;
      abbreviation: string;
    };
    DraftPick: {
      /** Format: int32 */
      collegeAthleteId: number | null;
      /** Format: int32 */
      nflAthleteId: number;
      /** Format: int32 */
      collegeId: number;
      collegeTeam: string;
      collegeConference: string | null;
      /** Format: int32 */
      nflTeamId: number;
      nflTeam: string;
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      overall: number;
      /** Format: int32 */
      round: number;
      /** Format: int32 */
      pick: number;
      name: string;
      position: string;
      /** Format: int32 */
      height: number | null;
      /** Format: int32 */
      weight: number | null;
      /** Format: int32 */
      preDraftRanking: number | null;
      /** Format: int32 */
      preDraftPositionRanking: number | null;
      /** Format: int32 */
      preDraftGrade: number | null;
      hometownInfo: {
        countyFips: string | null;
        longitude: string | null;
        latitude: string | null;
        country: string | null;
        state: string | null;
        city: string | null;
      };
    };
    CoachSeason: {
      school: string;
      /** Format: int32 */
      year: number;
      /** Format: int32 */
      games: number;
      /** Format: int32 */
      wins: number;
      /** Format: int32 */
      losses: number;
      /** Format: int32 */
      ties: number;
      /** Format: int32 */
      preseasonRank: number | null;
      /** Format: int32 */
      postseasonRank: number | null;
      /** Format: double */
      srs: number | null;
      /** Format: double */
      spOverall: number | null;
      /** Format: double */
      spOffense: number | null;
      /** Format: double */
      spDefense: number | null;
    };
    Coach: {
      firstName: string;
      lastName: string;
      /** Format: date-time */
      hireDate: string | null;
      seasons: components["schemas"]["CoachSeason"][];
    };
    StatsByQuarter: {
      /** Format: double */
      total: number;
      /** Format: double */
      quarter1: number | null;
      /** Format: double */
      quarter2: number | null;
      /** Format: double */
      quarter3: number | null;
      /** Format: double */
      quarter4: number | null;
    };
    TeamPPA: {
      team: string;
      /** Format: int32 */
      plays: number;
      overall: components["schemas"]["StatsByQuarter"];
      passing: components["schemas"]["StatsByQuarter"];
      rushing: components["schemas"]["StatsByQuarter"];
    };
    TeamSuccessRates: {
      team: string;
      overall: components["schemas"]["StatsByQuarter"];
      standardDowns: components["schemas"]["StatsByQuarter"];
      passingDowns: components["schemas"]["StatsByQuarter"];
    };
    TeamExplosiveness: {
      team: string;
      overall: components["schemas"]["StatsByQuarter"];
    };
    TeamRushingStats: {
      team: string;
      /** Format: double */
      powerSuccess: number;
      /** Format: double */
      stuffRate: number;
      /** Format: double */
      lineYards: number;
      /** Format: double */
      lineYardsAverage: number;
      /** Format: double */
      secondLevelYards: number;
      /** Format: double */
      secondLevelYardsAverage: number;
      /** Format: double */
      openFieldYards: number;
      /** Format: double */
      openFieldYardsAverage: number;
    };
    TeamHavoc: {
      team: string;
      /** Format: double */
      total: number;
      /** Format: double */
      frontSeven: number;
      /** Format: double */
      db: number;
    };
    TeamScoringOpportunities: {
      team: string;
      /** Format: int32 */
      opportunities: number;
      /** Format: int32 */
      points: number;
      /** Format: double */
      pointsPerOpportunity: number;
    };
    TeamFieldPosition: {
      team: string;
      /** Format: double */
      averageStart: number;
      /** Format: double */
      averageStartingPredictedPoints: number;
    };
    PlayerGameUsage: {
      /** Format: double */
      total: number;
      /** Format: double */
      quarter1: number | null;
      /** Format: double */
      quarter2: number | null;
      /** Format: double */
      quarter3: number | null;
      /** Format: double */
      quarter4: number | null;
      /** Format: double */
      rushing: number;
      /** Format: double */
      passing: number;
      player: string;
      team: string;
      position: string;
    };
    PlayerStatsByQuarter: {
      /** Format: double */
      total: number;
      /** Format: double */
      quarter1: number | null;
      /** Format: double */
      quarter2: number | null;
      /** Format: double */
      quarter3: number | null;
      /** Format: double */
      quarter4: number | null;
      /** Format: double */
      rushing: number;
      /** Format: double */
      passing: number;
    };
    PlayerPPA: {
      player: string;
      team: string;
      position: string;
      average: components["schemas"]["PlayerStatsByQuarter"];
      cumulative: components["schemas"]["PlayerStatsByQuarter"];
    };
    AdvancedBoxScore: {
      gameInfo: {
        /** Format: double */
        excitement: number;
        homeWinner: boolean;
        /** Format: double */
        awayWinProb: number;
        /** Format: int32 */
        awayPoints: number;
        awayTeam: string;
        /** Format: double */
        homeWinProb: number;
        /** Format: int32 */
        homePoints: number;
        homeTeam: string;
      };
      teams: {
        fieldPosition: components["schemas"]["TeamFieldPosition"][];
        scoringOpportunities: components["schemas"]["TeamScoringOpportunities"][];
        havoc: components["schemas"]["TeamHavoc"][];
        rushing: components["schemas"]["TeamRushingStats"][];
        explosiveness: components["schemas"]["TeamExplosiveness"][];
        successRates: components["schemas"]["TeamSuccessRates"][];
        cumulativePpa: components["schemas"]["TeamPPA"][];
        ppa: components["schemas"]["TeamPPA"][];
      };
      players: {
        ppa: components["schemas"]["PlayerPPA"][];
        usage: components["schemas"]["PlayerGameUsage"][];
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  GetAdjustedTeamSeasonStats: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdjustedTeamMetrics"][];
        };
      };
    };
  };
  GetAdjustedPlayerPassingStats: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference abbreviation filter */
        conference?: string;
        /** @description Optional position abbreviation filter */
        position?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerWeightedEPA"][];
        };
      };
    };
  };
  GetAdjustedPlayerRushingStats: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference abbreviation filter */
        conference?: string;
        /** @description Optional position abbreviation filter */
        position?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerWeightedEPA"][];
        };
      };
    };
  };
  GetKickerPaar: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference abbreviation filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["KickerPAAR"][];
        };
      };
    };
  };
  GetTeams: {
    parameters: {
      query?: {
        /** @description Optional conference abbreviation filter */
        conference?: string;
        /** @description Optional year filter to get historical conference affiliations */
        year?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"][];
        };
      };
    };
  };
  GetFBSTeams: {
    parameters: {
      query?: {
        /** @description Year or season */
        year?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"][];
        };
      };
    };
  };
  GetMatchup: {
    parameters: {
      query: {
        /** @description First team to compare */
        team1: string;
        /** @description Second team to compare */
        team2: string;
        /** @description Optional starting year */
        minYear?: number;
        /** @description Optional ending year */
        maxYear?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Matchup"];
        };
      };
    };
  };
  GetRoster: {
    parameters: {
      query?: {
        /** @description Optional team filter */
        team?: string;
        /** @description Optional year filter, defaults to 2023 */
        year?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RosterPlayer"][];
        };
      };
    };
  };
  GetConferences: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Conference"][];
        };
      };
    };
  };
  GetTalent: {
    parameters: {
      query: {
        /** @description Year filter */
        year: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamTalent"][];
        };
      };
    };
  };
  GetVenues: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Venue"][];
        };
      };
    };
  };
  GetPlayerSeasonStats: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional starting week range */
        startWeek?: number;
        /** @description Optional ending week range */
        endWeek?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional category filter */
        category?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerStat"][];
        };
      };
    };
  };
  GetTeamStats: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional week start range filter */
        startWeek?: number;
        /** @description Optional week end range filter */
        endWeek?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamStat"][];
        };
      };
    };
  };
  GetCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
    };
  };
  GetAdvancedSeasonStats: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Garbage time exclusion filter, defaults to false */
        excludeGarbageTime?: boolean;
        /** @description Optional start week range filter */
        startWeek?: number;
        /** @description Optional end week range filter */
        endWeek?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdvancedSeasonStat"][];
        };
      };
    };
  };
  GetAdvancedGameStats: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Optional week filter */
        week?: number;
        /** @description Optional opponent filter */
        opponent?: string;
        /** @description Garbage time exclusion filter, defaults to false */
        excludeGarbageTime?: boolean;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdvancedGameStat"][];
        };
      };
    };
  };
  GetRecruits: {
    parameters: {
      query?: {
        /** @description Year filter, required when no team specified */
        year?: number;
        /** @description Team filter, required when no team specified */
        team?: string;
        /** @description Optional position categorization filter */
        position?: string;
        /** @description Optional state/province filter */
        state?: string;
        /** @description Optional recruit type classification filter, defaults to HighSchool */
        classification?: components["schemas"]["RecruitClassification"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Recruit"][];
        };
      };
    };
  };
  GetTeamRecruitingRankings: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional team filter */
        team?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamRecruitingRanking"][];
        };
      };
    };
  };
  GetAggregatedTeamRecruitingRatings: {
    parameters: {
      query?: {
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional recruit type filter, defaults to HighSchool */
        recruitType?: components["schemas"]["RecruitClassification"];
        /** @description Optional start year range, defaults to 2000 */
        startYear?: number;
        /** @description Optional end year range, defaults to current year */
        endYear?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AggregatedTeamRecruiting"][];
        };
      };
    };
  };
  GetSP: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamSP"][];
        };
      };
    };
  };
  GetConferenceSP: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConferenceSP"][];
        };
      };
    };
  };
  GetSRS: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamSRS"][];
        };
      };
    };
  };
  GetElo: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional week filter, defaults to last available week in the season */
        week?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamElo"][];
        };
      };
    };
  };
  GetFPI: {
    parameters: {
      query?: {
        /** @description year filter, required if team not specified */
        year?: number;
        /** @description team filter, required if year not specified */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamFPI"][];
        };
      };
    };
  };
  GetRankings: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional week filter */
        week?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PollWeek"][];
        };
      };
    };
  };
  GetPlays: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Required week filter */
        week: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional offensive team filter */
        offense?: string;
        /** @description Optional defensive team filter */
        defense?: string;
        /** @description Optional offensive conference filter */
        offenseConference?: string;
        /** @description Optional defensive conference filter */
        defenseConference?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optoinal play type abbreviation filter */
        playType?: string;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Play"][];
        };
      };
    };
  };
  GetPlayTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayType"][];
        };
      };
    };
  };
  GetPlayStats: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional week filter */
        week?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional gameId filter */
        gameId?: number;
        /** @description Optional athleteId filter */
        athleteId?: number;
        /** @description Optional statTypeId filter */
        statTypeId?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayStat"][];
        };
      };
    };
  };
  GetPlayStatTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayStatType"][];
        };
      };
    };
  };
  SearchPlayers: {
    parameters: {
      query: {
        /** @description Search term for matching player name */
        searchTerm: string;
        /** @description Optional year filter */
        year?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional position abbreviation filter */
        position?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerSearchResult"][];
        };
      };
    };
  };
  GetPlayerUsage: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Optional conference abbreviation filter */
        conference?: string;
        /** @description Optional position abbreivation filter */
        position?: string;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional player id filter */
        playerId?: number;
        /** @description Optional exclude garbage time flag, defaults to false */
        excludeGarbageTime?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerUsage"][];
        };
      };
    };
  };
  GetReturningProduction: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReturningProduction"][];
        };
      };
    };
  };
  GetTransferPortal: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerTransfer"][];
        };
      };
    };
  };
  GetPredictedPoints: {
    parameters: {
      query: {
        /** @description Down value */
        down: number;
        /** @description Distance value */
        distance: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PredictedPointsValue"][];
        };
      };
    };
  };
  GetPredictedPointsAddedByTeam: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Conference abbreviation filter */
        conference?: string;
        /** @description Exclude garbage time plays */
        excludeGarbageTime?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamSeasonPredictedPointsAdded"][];
        };
      };
    };
  };
  GetPredictedPointsAddedByGame: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Optional week filter */
        week?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference abbreviation filter */
        conference?: string;
        /** @description Optional flag to exclude garbage time plays */
        excludeGarbageTime?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamGamePredictedPointsAdded"][];
        };
      };
    };
  };
  GetPredictedPointsAddedByPlayerGame: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Week filter, required if team not specified */
        week?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Team filter, required if week not specified */
        team?: string;
        /** @description Optional player position abbreviation filter */
        position?: string;
        /** @description Optional player ID filter */
        playerId?: string;
        /** @description Threshold value for minimum number of plays */
        threshold?: number;
        /** @description Optional flag to exclude garbage time plays */
        excludeGarbageTime?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerGamePredictedPointsAdded"][];
        };
      };
    };
  };
  GetPredictedPointsAddedByPlayerSeason: {
    parameters: {
      query?: {
        /** @description Year filter, required if playerId not specified */
        year?: number;
        /** @description Optional conference abbreviation filter */
        conference?: string;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional position abbreviation filter */
        position?: string;
        /** @description Player ID filter, required if year not specified */
        playerId?: string;
        /** @description Threshold value for minimum number of plays */
        threshold?: number;
        /** @description Optional flag to exclude garbage time plays */
        excludeGarbageTime?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerSeasonPredictedPointsAdded"][];
        };
      };
    };
  };
  GetWinProbability: {
    parameters: {
      query: {
        /** @description Required game ID filter */
        gameId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayWinProbability"][];
        };
      };
    };
  };
  GetPregameWinProbabilities: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional week filter */
        week?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional team filter */
        team?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PregameWinProbability"][];
        };
      };
    };
  };
  GetFieldGoalExpectedPoints: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FieldGoalEP"][];
        };
      };
    };
  };
  GetLivePlays: {
    parameters: {
      query: {
        /** @description Game Id filter */
        gameId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LiveGame"];
        };
      };
    };
  };
  GetLines: {
    parameters: {
      query?: {
        /** @description Optional gameId filter */
        gameId?: number;
        /** @description Year filter, required if game id not specified */
        year?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional week filter */
        week?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional home team filter */
        home?: string;
        /** @description Optional away team filter */
        away?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional provider name filter */
        provider?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BettingGame"][];
        };
      };
    };
  };
  GetUserInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description UserInfo object containing patron level and remaining calls, or null if not authenticated. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfo"] | null;
        };
      };
    };
  };
  GetGames: {
    parameters: {
      query?: {
        /** @description Required year filter (except when id is specified) */
        year?: number;
        /** @description Optional week filter */
        week?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
        /** @description Optional team filter */
        team?: string;
        /** @description Optional home team filter */
        home?: string;
        /** @description Optional away team filter */
        away?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Game id filter to retrieve a single game */
        id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Game"][];
        };
      };
    };
  };
  GetGameTeamStats: {
    parameters: {
      query?: {
        /** @description Required year filter (along with one of week, team, or conference), unless id is specified */
        year?: number;
        /** @description Optional week filter, required if team and conference not specified */
        week?: number;
        /** @description Optional team filter, required if week and conference not specified */
        team?: string;
        /** @description Optional conference filter, required if week and team not specified */
        conference?: string;
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional id filter to retrieve a single game */
        id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GameTeamStats"][];
        };
      };
    };
  };
  GetGamePlayerStats: {
    parameters: {
      query?: {
        /** @description Required year filter (along with one of week, team, or conference), unless id is specified */
        year?: number;
        /** @description Optional week filter, required if team and conference not specified */
        week?: number;
        /** @description Optional team filter, required if week and conference not specified */
        team?: string;
        /** @description Optional conference filter, required if week and team not specified */
        conference?: string;
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional player statistical category filter */
        category?: string;
        /** @description Optional id filter to retrieve a single game */
        id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GamePlayerStats"][];
        };
      };
    };
  };
  GetMedia: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional week filter */
        week?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional media type filter */
        mediaType?: components["schemas"]["MediaType"];
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GameMedia"][];
        };
      };
    };
  };
  GetWeather: {
    parameters: {
      query?: {
        /** @description Year filter, required if game id not specified */
        year?: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional week filter */
        week?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
        /** @description Filter for retrieving a single game */
        gameId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GameWeather"][];
        };
      };
    };
  };
  GetRecords: {
    parameters: {
      query?: {
        /** @description Year filter, required if team not specified */
        year?: number;
        /** @description Team filter, required if year not specified */
        team?: string;
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamRecords"][];
        };
      };
    };
  };
  GetCalendar: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CalendarWeek"][];
        };
      };
    };
  };
  GetScoreboard: {
    parameters: {
      query?: {
        /** @description Optional division classification filter, defaults to fbs */
        classification?: components["schemas"]["DivisionClassification"];
        /** @description Optional conference filter */
        conference?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ScoreboardGame"][];
        };
      };
    };
  };
  GetDrives: {
    parameters: {
      query: {
        /** @description Required year filter */
        year: number;
        /** @description Optional season type filter */
        seasonType?: components["schemas"]["SeasonType"];
        /** @description Optional week filter */
        week?: number;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional offensive team filter */
        offense?: string;
        /** @description Optional defensive team filter */
        defense?: string;
        /** @description Optional conference filter */
        conference?: string;
        /** @description Optional offensive team conference filter */
        offenseConference?: string;
        /** @description Optional defensive team conference filter */
        defenseConference?: string;
        /** @description Optional division classification filter */
        classification?: components["schemas"]["DivisionClassification"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Drive"][];
        };
      };
    };
  };
  GetDraftTeams: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DraftTeam"][];
        };
      };
    };
  };
  GetDraftPositions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DraftPosition"][];
        };
      };
    };
  };
  GetDraftPicks: {
    parameters: {
      query?: {
        /** @description Optional year filter */
        year?: number;
        /** @description Optional NFL team filter */
        team?: string;
        /** @description Optional college team filter */
        school?: string;
        /** @description Optional college conference filter */
        conference?: string;
        /** @description Optional position classification filter */
        position?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DraftPick"][];
        };
      };
    };
  };
  GetCoaches: {
    parameters: {
      query?: {
        /** @description Optional first name filter */
        firstName?: string;
        /** @description Optional last name filter */
        lastName?: string;
        /** @description Optional team filter */
        team?: string;
        /** @description Optional year filter */
        year?: number;
        /** @description Optional start year range filter */
        minYear?: number;
        /** @description Optional end year range filter */
        maxYear?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Coach"][];
        };
      };
    };
  };
  GetAdvancedBoxScore: {
    parameters: {
      query: {
        /** @description Required game id filter */
        id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdvancedBoxScore"];
        };
      };
    };
  };
}
